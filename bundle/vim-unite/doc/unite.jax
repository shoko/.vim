*unite.txt*	すべてのsourceを統合する

Version: 1.0
Author : Shougo <Shougo.Matsu@gmail.com>
Japanese Documentation Author: naoina
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

目次						*unite-contents*

概要			|unite-introduction|
使い方			|unite-usage|
インストール		|unite-install|
インターフェース	|unite-interface|
  コマンド		  |unite-commands|
  変数			  |unite-variables|
    sourceの変数	    |unite-sources-variables|
  キーマッピング	  |unite-key-mappings|
  関数			  |unite-functions|
  source		  |unite-source|
  kind			  |unite-kind|
  アクション		  |unite-action|
設定例			|unite-examples|
sourceの作成		|unite-create-source|
kindの作成		|unite-create-kind|
ユーザーのsource	|unite-user-sources|
ToDo			|unite-todo|
既知のバグ			|unite-bugs|
更新履歴		|unite-changelog|

==============================================================================
概要						*unite-introduction*

*unite* はファイル、バッファ、最近使用したファイル、レジスタといった、任意の情
報源からの検索、表示を行う。表示された候補に対して、候補のkindごとに定義された
アクションを実行することができる。

似たプラグインとして、|fuzzyfinder|や|ku|があるが、|unite| はVimの補完インタフ
ェースを使用しないということ、sourceの統合を行うことが違いとして挙げられる。

==============================================================================
使い方						*unite-usage*

	sourceとしてファイル及び、バッファを指定して起動する場合
>
	:Unite file buffer
<

	絞込みテキストとしてhogeを入力した状態で起動する場合
>
	:Unite -input=hoge file
<

uniteを起動すると、デフォルトの状態ではウィンドウが水平に分割され、デフォルトで
は上側にuniteのバッファが開かれる。例えば
>
	:Unite file
<
として起動した場合、カレントディレクトリのファイルの一覧が表示されているはずで
ある。その状態で j、k、で候補を選択できるので、適当に候補を選び、Enter を押せ
ば選択した候補が新しいバッファで開かれる。これは選択した候補のkindがファイルで
あった場合の、デフォルトのアクションである。候補を選択して <Tab> を押下すると
候補に対するアクションが選択できる。アクションについては|unite-action|を参照。

候補が多い場合などはキーワードによって絞り込むことができる。前回と同じように
起動した後に、i を押下するとカーソルが2行目の > の右側に移る。これで絞込みテ
キストが入力できる。この状態で文字を入力すると、1文字入力するごとに候補が絞り
込まれていく。また * (ワイルドカード)を入力すると任意の文字で絞り込むことがで
きる。例えば
>
	*hoge
<
上記は hoge、ahoge、foohoge などにマッチする。また、ワイルドカードを2つ続けて
入力すると、ディレクトリを再帰的に指定できる。例えば
>
	**/foo
<
上記は hoge/foo、hoge/fuga/foo などにマッチする。ただし上記コマンドは実際には
後述する|file_rec|を用いた方が良い。

絞り込み文字列はスペース区切りで複数指定できる。例えば
>
	hoge piyo
<
上記は hogeにマッチかつ、piyoにマッチする候補にマッチする。

除外パターンを!で記述できる。例えば
>
	hoge !piyo
<
上記は hogeにマッチするが、piyoにマッチする候補は除外される。

	-buffer-nameオプションにfilesを設定すると、/区切りでワイルドカードが自
	動的に付加される。これはファイルをuniteで選択する際に便利である。
>
	:Unite -buffer-name=files file
<
その他の操作については|unite_default_key_mappings|を参照。

==============================================================================
インストール					*unite-install*

配布ファイルをVimスクリプトのディレクトリへインストールする。
(普通は ~/.vim/ またはWindowsの場合、 $HOME/vimfiles)

インストールに成功すると、sourceを引数に指定して、|:Unite|コマンドでuniteを実
行することができる。しかしながら毎回このコマンドを実行するのは非常に手間である
ため、何かしらのキーマッピングを定義すると良いだろう。

==============================================================================
インターフェース				*unite-interface*

------------------------------------------------------------------------------
コマンド 					*unite-commands*

:Unite [{options}] {sources}			*:Unite*
		{sources} で指定したsourceでの候補ウィンドウを表示する。初期の
		絞込みテキストは空。{sources} はスペースで区切って複数指定でき
		る。また、{sources} の指定順序がsourceの候補の表示順序となる。
		sourceについては|unite-source|を参照。

		現在uniteバッファに居る場合、絞り込みテキストは保存される。

		source名の後ろに:で区切った文字列のリストを引数として渡すことが
		できる。引数に含まれる:と\は\でエスケープしなければならない。引
		数がどう解釈されるかは、sourceによって異なる。

		例：
		"file:hoge:piyo": source fileに与える引数は[hoge, piyo]である。
		"file:hoge\:piyo": source fileに与える引数は[hoge:piyo]である。

		{options}とはuniteバッファに与えるオプションである。
		オプションは、次のパラメータを取る。値にスペースが含まれるとき
		は、\でエスケープしなければならない。

		-buffer-name={buffer-name}
		uniteのバッファ名を指定する。同じ目的を持つuniteバッファに同じ
		バッファ名を付けることで、|unite#set_substitute_pattern()|など
		の設定を共通化することができる。指定しないと、'default'が使われ
		る。

		-input={input-text}
		初期の絞込みテキストを指定する。指定しないと、''が使われる。

		-prompt={prompt-text}
		プロンプトを指定する。指定しないと、'> 'が使われる。

		-default-action={default-action}
		デフォルトアクションを指定する。指定しないと、'default'が使われ
		る。

		-start-insert
		初期状態が絞り込みモードになる。指定しないと、初期状態はNormal
		modeになる。

		-no-quit
		アクションを実行しても、uniteバッファを閉じない。指定しないと、
		"is_quit"なアクションを実行するとuniteバッファは閉じられる。

		-winwidth={window-width}
		uniteバッファの幅を指定する。指定しないと、|g:unite_winwidth|が
		使われる。

		-winheight={window-height}
		uniteバッファの高さを指定する。指定しないと、
		|g:unite_winheight|が使われる。

:UniteWithCurrentDir [{options}] {sources}	*:UniteWithCurrentDir*
		初期の絞込みテキストが現在のディレクトリである他は|:Unite|と同
		一である。

:UniteWithBufferDir [{options}] {sources}	*:UniteWithBufferDir*
		初期の絞込みテキストが現在のバッファのディレクトリである他は
		|:Unite|と同一である。

:UniteWithCursorWord [{options}] {sources}	*:UniteWithCursorWord*
		初期の絞込みテキストが現在のカーソル位置文字列である他は
		|:Unite|と同一である。

:UniteWithInput [{options}] {sources}		*:UniteWithInput*
		初期の絞込みテキストをユーザーが入力する他は|:Unite|と同一であ
		る。

:UniteResume [{buffer-name}]			*:UniteResume*
		以前開いた{buffer-name}という名前のuniteバッファを再利用する。
		{buffer-name}を省略すると、以前使用したバッファを再利用する。
		絞込みテキストや候補はそのままの状態となる。

sourceのコマンド				*unite-sources-commands*

:UniteBookmarkAdd [{file}]			*:UniteBookmarkAdd*
		ブックマークリストにファイルを追加する。引数が指定されなかった
		場合、現在のファイルの現在位置が記録される。

------------------------------------------------------------------------------
変数						*unite-variables*

g:unite_update_time				*g:unite_update_time*
		絞込みテキストを入力するごとに表示される候補の更新間隔を制御す
		る。単位はミリ秒。
		
		初期値は200である。

g:unite_enable_start_insert			*g:unite_enable_start_insert*
		uniteを実行したあとすぐに、絞込みテキストの入力モードにするかを
		制御する。1ならば有効になる。
		
		初期値は0である。

g:unite_enable_ignore_case			*g:unite_enable_ignore_case*
		大文字・小文字を区別するかを制御する。1ならば区別しない。
		
		初期値は'ignorecase'オプションと同じである。

g:unite_enable_smart_case			*g:unite_enable_smart_case*
		入力に大文字が含まれている場合は、大文字・小文字を区別する。1
		ならば有効になる。
		
		初期値は'infercase'オプションと同じである。

g:unite_split_rule				*g:unite_split_rule*
		uniteのウィンドウを生成する際、画面分割の位置ルールを指定する。
		
		初期値は"topleft"である。

g:unite_enable_split_vertically			*g:unite_enable_split_vertically*
		uniteのウィンドウを垂直分割にするかどうかを制御する。1ならば垂
		直分割にする。
		
		初期値は0なので、水平分割である。

g:unite_winheight				*g:unite_winheight*
		uniteのウィンドウが水平分割されたときの高さを指定する。垂直分割
		の場合は無視される。
		
		初期値は20である。

g:unite_winwidth				*g:unite_winwidth*
		uniteのウィンドウが垂直分割されたときの幅を指定する。水平分割の
		場合は無視される。
		
		初期値は90である。

g:unite_cd_command				*g:unite_cd_command*
		cdアクションで実行されるVimのコマンドを指定する。
		
		初期値は"cd"である。

g:unite_lcd_command				*g:unite_lcd_command*
		lcdアクションで実行されるVimのコマンドを指定する。
		
		初期値は"lcd"である。

g:unite_quick_match_table			*g:unite_quick_match_table*
		入力文字と対応する、クイックマッチリストの補完候補のテーブルで
		ある。
		
		初期値は複雑なので、plugin/unite.vimを参照せよ。

g:unite_data_directory				*g:unite_data_directory*
		uniteやそのsourceが内部で使用する設定ファイルを書き出すディレク
		トリを指定する。ここで指定したディレクトリが実際に存在しない場
		合、自動的に作成される。例えばfile_mruのsourceは最近使用したフ
		ァイルの情報をこの下に保存する。
		
		初期値は'~/.unite'の絶対パスである。

g:unite_no_default_keymappings			*g:unite_no_default_keymappings*
		この変数の値を1にすれば、uniteが予め用意しているキーマッピング
		を設定しない。混乱するので、特に理由がない限り、通常は有効にす
		べきではない。
		
		この変数はユーザーが自分で定義しない限り存在しない。

sourceの変数					*unite-sources-variables*

g:unite_source_file_ignore_pattern		*g:unite_source_file_ignore_pattern*
		sourceがfileの候補に表示しないファイルの正規表現パターンを指定
		する。マッチングはファイルのフルパスに対して行われる。この変数
		が空文字列以外であれば、指定した正規表現で結果をフィルタリング
		する。正規表現の大文字・小文字の区別は'ignorecase'の設定次第で
		ある。

		初期値は autoload/unite/sources/file.vim を参照。

g:unite_source_file_mru_time_format		*g:unite_source_file_mru_time_format*
		sourceがfile_mruの候補での最終アクセス時間の表示フォーマットを
		指定する。フォーマットは|strftime()|で指定できるものと同じであ
		る。
		
		初期値は"(%c)"である。

g:unite_source_file_mru_file			*g:unite_source_file_mru_file*
		最近使用したファイルの情報を書き出すファイルを指定する。
		
		初期値は |g:unite_data_directory| . '/.file_mru' である。

g:unite_source_file_mru_limit			*g:unite_source_file_mru_limit*
		最近使用したファイルの最大保存件数を指定する。
		
		初期値は100である。

g:unite_source_file_mru_ignore_pattern		*g:unite_source_file_mru_ignore_pattern*
		sourceがfile_mruの候補に表示しないファイルの正規表現パターンを
		指定する。マッチングはファイルのフルパスに対して行われる。この
		変数が空文字列以外であれば、指定した正規表現で結果をフィルタリ
		ングする。正規表現の大文字・小文字は'ignorecase'の設定に関わら
		ず、明確に区別される。
		
		初期値は autoload/unite/sources/file_mru.vim を参照。

g:unite_source_bookmark_file			*g:unite_source_bookmark_file*
		ブックマークを書き出すファイルを指定する。
		
		初期値は |g:unite_data_directory| . '/.bookmark' である。

------------------------------------------------------------------------------
キーマッピング 					*unite-key-mappings*

ノーマルモードマッピング

<Plug>(unite_exit)				*<Plug>(unite_exit)*
		uniteを終了する。

<Plug>(unite_do_default_action)			*<Plug>(unite_do_default_action)*
		選択している候補に対してデフォルトのアクションを実行する。アク
		ションは候補のkindごとに定義されている。
		kindについては|unite-kind|を参照。
		デフォルトのアクションについては|unite-default-action|を参照。

<Plug>(unite_choose_action)			*<Plug>(unite_choose_action)*
		選択している候補に対して実行するアクションを選択する。アクショ
		ンはkindごとに定義されている。複数の候補が選択されている場合は
		共通なアクションのみ選択ができる。
		kindについては|unite-kind|を参照。

<Plug>(unite_insert_enter)			*<Plug>(unite_insert_enter)*
		カーソル位置から絞込みテキスト入力を開始する。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_insert_head)			*<Plug>(unite_insert_head)*
		カーソルを先頭に移動して絞込みテキスト入力を開始する。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_append_enter)			*<Plug>(unite_append_enter)*
		カーソルの右側から絞込みテキスト入力を開始します。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_append_end)			*<Plug>(unite_append_end)*
		カーソルを行末に移動して絞込みテキストの入力を開始する。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_toggle_mark_current_candidate)	*<Plug>(unite_toggle_mark_current_candidate)*
		カレント行の候補のマークを反転させる。複数の候補をマークすれば、
		複数の候補に対して一気にアクションを実行することができる。

<Plug>(unite_redraw)				*<Plug>(unite_redraw)*
		|g:unite_update_time|で制御される更新間隔を待たずに、すぐに表
		示を更新する。

<Plug>(unite_search_next_source)		*<Plug>(unite_search_next_source)*
		次のsourceの最初の候補にカーソルを移動する。

<Plug>(unite_search_previous_source)		*<Plug>(unite_serch_previous_source)*
		前のsourceの最初の候補にカーソルを移動する。

<Plug>(unite_print_candidate)			*<Plug>(unite_print_candidate)*
		選択している候補に対するアクションの対象を表示する。例えば、選
		択している候補のkindが|word|の場合は、対象の内容が表示される。

<Plug>(unite_cursor_top)			*<Plug>(unite_cursor_top)*
		uniteバッファの一番上へ移動する。

<Plug>(unite_loop_cursor_down)			*<Plug>(unite_loop_cursor_down)*
		次の行に移動。ただしバッファの最後にいる場合はループする。

<Plug>(unite_loop_cursor_up)			*<Plug>(unite_loop_cursor_up)*
		前の行に移動。ただしバッファの一番上にいる場合はループする。

<Plug>(unite_quick_match_default_action)	*<Plug>(unite_quick_match_default_action)*
		クイックマッチを行い、選択した候補のデフォルトアクションを実行
		する。マークしている候補がある場合は無効となる。

インサートモードマッピング

<Plug>(unite_exit)				*i_<Plug>(unite_exit)*
		uniteを終了する。

<Plug>(unite_insert_leave)			*i_<Plug>(unite_insert_leave)*
		ノーマルモードに移行する。

<Plug>(unite_delete_backward_char)		*i_<Plug>(unite_delete_backward_char)*
		カーソル直前の1文字を消す。文字が入力されていない場合はuniteを
		終了する。

<Plug>(unite_delete_backward_line)		*i_<Plug>(unite_delete_backward_line)*
		カーソルから行の先頭までの文字をすべて削除する。

<Plug>(unite_delete_backward_word)		*i_<Plug>(unite_delete_backward_word)*
		カーソル直前の単語を削除する。

<Plug>(unite_delete_backward_path)		*i_<Plug>(unite_delete_backward_path)*
		一つ上のパスまで削除する。
		たとえば >
		/home/Shougo/Desktop
<		や >
		/home/Shougo/Desktop/
<		の時に<Plug>(unite_delete_backward_path)すると >
		/home/Shougo
<		になる。ファイルパスを操作する際に有効。

<Plug>(unite_select_next_line)			*i_<Plug>(unite_select_next_line)*
		次の候補に移動。ただし候補の最後にいる場合はループする。

<Plug>(unite_select_previous_line)		*i_<Plug>(unite_select_previous_line)*
		前の候補に移動。ただし候補の先頭にいる場合はループする。

<Plug>(unite_select_next_page)			*i_<Plug>(unite_select_next_page)*
		次の候補ページを表示。

<Plug>(unite_select_previous_page)		*i_<Plug>(unite_select_previous_page)*
		前の候補ページを表示。

<Plug>(unite_do_default_action)			*i_<Plug>(unite_do_default_action)*
		|<Plug>(unite_do_default_action)|と同じ。

<Plug>(unite_toggle_mark_current_candidate)	*i_<Plug>(unite_toggle_mark_current_candidate)*
		|<Plug>(unite_toggle_mark_current_candidate)|と同じ。

<Plug>(unite_choose_action)			*i_<Plug>(unite_choose_action)*
		|<Plug>(unite_choose_action)|と同じ。

<Plug>(unite_move_head)				*i_<Plug>(unite_move_head)*
		カーソルを先頭に移動する。

<Plug>(unite_quick_match_default_action)	*i_<Plug>(unite_quick_match_default_action)*
		|<Plug>(unite_quick_match_default_action)|と同じ。

ビジュアルモードマッピング

<Plug>(unite_toggle_mark_selected_candidates)	*v_<Plug>(unite_toggle_selected_candidates)*
		ビジュアル選択している候補に対して、マークのオンオフを切り替え
		る。

						*unite_default_key_mappings*
デフォルトキーマッピング

ノーマルモードマッピング
{lhs}		{rhs}
--------	-----------------------------
i		|<Plug>(unite_insert_enter)|
I		|<Plug>(unite_insert_head)|
a		|<Plug>(unite_append_enter)|
A		|<Plug>(unite_append_end)|
q		|<Plug>(unite_exit)|
<Space>		|<Plug>(unite_toggle_mark_current_candidate)|
<Tab>		|<Plug>(unite_choose_action)|
<C-n>		|<Plug>(unite_search_next_source)|
<C-p>		|<Plug>(unite_search_previous_source)|
<C-g>		|<Plug>(unite_print_candidate)|
<C-l>		|<Plug>(unite_redraw)|
gg		|<Plug>(unite_cursor_top)|
j		|<Plug>(unite_loop_cursor_down)|
<Down>		|<Plug>(unite_loop_cursor_down)|
k		|<Plug>(unite_loop_cursor_up)|
<Up>		|<Plug>(unite_loop_cursor_up)|
<CR>		候補を選択している場合は default アクションの実行
l		候補を選択している場合は default アクションの実行
d		候補を選択している場合は delete アクションの実行
b		候補を選択している場合は bookmark アクションの実行
e		候補を選択している場合は narrow アクションの実行
p		候補を選択している場合は preview アクションの実行
x		候補を選択している場合は|<Plug>(unite_quick_match_default_action)|

インサートモードマッピング
{lhs}		{rhs}
--------	-----------------------------
<ESC>		|i_<Plug>(unite_insert_leave)|
<Tab>		|i_<Plug>(unite_choose_action)|
<C-n>		|i_<Plug>(unite_select_next_line)|
<Down>		|i_<Plug>(unite_select_next_line)|
<C-p>		|i_<Plug>(unite_select_previous_line)|
<Up>		|i_<Plug>(unite_select_previous_line)|
<C-f>		|i_<Plug>(unite_select_next_page)|
<C-b>		|i_<Plug>(unite_select_previous_page)|
<CR>		|i_<Plug>(unite_do_default_action)|
<C-h>		|i_<Plug>(unite_delete_backward_char)|
<BS>		|i_<Plug>(unite_delete_backward_char)|
<C-u>		|i_<Plug>(unite_delete_backward_line)|
<C-w>		|i_<Plug>(unite_delete_backward_word)|
<C-a>		|i_<Plug>(unite_move_head)|
<Home>		|i_<Plug>(unite_move_head)|
/		候補を選択している場合は narrow アクションの実行
d		候補を選択している場合は delete アクションの実行
<Space>		候補を選択している場合は|i_<Plug>(unite_toggle_mark_current_candidate)|
x		候補を選択している場合は|i_<Plug>(unite_quick_match_default_action)|

ビジュアルモードマッピング
{lhs}		{rhs}
--------	-----------------------------
<Space>		|v_<Plug>(unite_toggle_mark_selected_candidates)|

==============================================================================
関数						*unite-functions*

unite#start({sources}, [, {context}])				*unite#start()*
		uniteバッファを新しく生成する。現在uniteバッファに居る場合、絞
		り込みテキストは保存される。
		{sources}はリストであり、それぞれの要素は{source-name}または、
		[{source-name}, [{args},...]]という形式である。
		{args}には{source-name}に渡す引数を文字列形式で複数指定できる。
		{context}については、|unite-notation-{context}|を参照せよ。値を
		省略すると、デフォルト値が使用される。

unite#get_context()						*unite#get_context()*
		現在のuniteバッファのコンテキスト情報を得る。
		|unite#custom_action()|などで、|unite#start()|を内部で呼び出す
		際に使用する。

unite#do_action({action-name})					*unite#do_action()*
		マークしている候補に対して{action-name}アクションを実行す
		るためのキーシーケンスを返す。この関数はuniteが起動している時に
		のみ動作する。{action-name}が存在しない、もしくは不正な実行だっ
		た場合は実行時エラーとなる。
		ユーザー側で特定のアクションを実行するためのマッピングを定義す
		る場合に便利である。
		{action-name}に"default"を指定すると、デフォルトのアクションが
		実行される。
		候補がマークされていない場合は、現在の行もしくは、一番上の候補
		に対してアクションを実行することになる。
		inoremap <buffer><expr>やnnoremap <buffer><expr>で通常用いる。
		例:
>
		nnoremap <silent><buffer><expr> <C-k> unite#do_action('preview')
>
unite#smart_map({narrow-map}, {select-map})			*unite#smart_map()*
		絞り込み時と選択時のマッピングを設定し、文脈によって切り換える
		キーシーケンスを返す。|unite#do_action()|と組み合わせて使用する
		と良い。
		inoremap <buffer><expr>やnnoremap <buffer><expr>で通常用いる。
		例:
>
		inoremap <buffer><expr> ' unite#smart_map("'", unite#do_action('preview'))
<
unite#set_substitute_pattern({buffer-name}, {pattern}, {subst} [, {priority}])
						*unite#set_substitute_pattern()*
		uniteのバッファ名{buffer-name}における絞込みテキストの置換パタ
		ーンを指定する。{buffer-name}を""とすると、"default"となり、
		|:Unite|で-buffer-name=を省略したときに使われるbuffer-nameと同
		じになる。{buffer-name}は","区切りで複数指定ができる。
		{pattern}は置換対象の正規表現、{subst}は置換する文字列である。
		同じ{pattern}を複数回指定すると、設定は上書きされる。
		{subst}を""とすると、{pattern}は無効化される。
		{priority}とは置換処理の優先度である。{pattern}は{priority}でソ
		ートされた上で、{priority}が大きい順に適用される。{priority}を
		省略すると0になる。先に処理されるべき{pattern}は{priority}を大
		きくすると良い。
		ちなみに、uniteバッファの初期文字列は置換の対象とならない。
		
		この関数を使うと、曖昧マッチを模倣することができる。
>
		call unite#set_substitute_pattern('files', '[[:alnum:]]', '*\0', 100)
		call unite#set_substitute_pattern('files', '[[:alnum:]]', ' \0', 100)
<
		上の設定は/を越えずに曖昧検索をするが、下の場合は/を越えて曖昧
		検索することができる。
		
		初期値は次のように設定されていて、buffer_nameがfilesのバッファ
		において、~を$HOME、/は部分マッチできるように、ワイルドカードを
		付加するようになっている。
>
		call unite#set_substitute_pattern('files', '^\~', substitute(substitute($HOME, '\\', '/', 'g'), ' ', '\\\\ ', 'g'), -100)
		call unite#set_substitute_pattern('files', '[^~.*]\zs/', '*/*', 100)
<
unite#get_substitute_pattern({buffer-name})
						*unite#get_substitute_pattern()*
		uniteのバッファ名{buffer-name}における絞込みテキストの置換パタ
		ーンを取得する。{buffer-name}に置換パターンが定義されていない
		と、エラーになる。デバッグ用である。

unite#custom_default_action({kind}, {default-action})
						*unite#custom_default_action()*
		{kind}に対するデフォルトアクションを{default-action}に置き換え
		る。{kind}は","区切りで複数指定ができる。
		例:
>
		call unite#custom_default_action('file', 'tabopen')
<
unite#custom_action({kind}, {name}, {action})
						*unite#custom_action()*
		{kind}に対し、{name}という名前の{action}を付け加える。
		{kind}は","区切りで複数指定ができる。
		例:
>
		let my_tabopen = {
		\ 'is_selectable' : 1,
		\ }
		function! my_tabopen.func(candidates)
		  call unite#take_action('tabopen', a:candidates, self.func)
		
		  let l:dir = isdirectory(a:candidate.word) ? a:candidate.word : fnamemodify(a:candidate.word, ':p:h')
		  execute g:unite_lcd_command '`=l:dir`'
		endfunction
		call unite#custom_action('file,buffer', 'tabopen', my_tabopen)
		unlet my_tabopen
<
unite#undef_custom_action({kind}, {name})			*unite#undef_custom_action()*
		|unite#custom_action()|で追加した、{kind}の{name}というactionを削
		除する。{kind}は","区切りで複数指定ができる。
		存在しないときは無視される。

unite#custom_alias({kind}, {name}, {action})
						*unite#custom_alias()*
		{kind}に対する{action}の別名である、{name}というアクションを定
		義する。アクションに短縮名を付けたい場合に便利。
		{kind}は","区切りで複数指定ができる。
		{action}を"nop"とすると、そのアクションは無効化される。
		例:
>
		call unite#custom_alias('file', 'h', 'left')
<
unite#take_action({action-name}, {candidate}, {self-func})
						*unite#take_action()*
		{candidate}に対し、{action-name}という名前のアクションを実行する。
		{self-func}には無限ループを防ぐため、この関数を呼び出してい
		る関数の|Funcref|を渡す。主に、unite#custom_action()などで用
		いる。
		is_selectableなアクションの場合は{candidate}がリストに自動変換
		される。

unite#take_parents_action({action-name}, {candidate}, {extend-candidate})
						*unite#take_parents_action()*
		|unite#take_action()|と同じだが、{candidate}に
		{extend-candidate}が合成された上で、parentsのアクションテーブル
		のみが検索される。親のアクションを再利用したいときに用いる。

unite#define_source({source})			*unite#define_source()*
		{source}を動的に追加する。sourceの仕様については、
		|unite-create-source|を参照せよ。
		すでにその名前のsourceが存在する場合は上書きされる。

unite#define_kind({kind})			*unite#define_kind()*
		{kind}を動的に追加する。kindの仕様については、
		|unite-create-kind|を参照せよ。
		すでにその名前のkindが存在する場合は上書きされる。

unite#undef_source({name})			*unite#undef_source()*
		|unite#define_source()|で追加した{name}というsourceを削除する。
		存在しないときは無視される。

unite#undef_kind({name})			*unite#undef_kind()*
		|unite#define_kind()|で追加した{name}というkindを削除する。
		存在しないときは無視される。

==============================================================================
source						*unite-source*

						*unite-source-file*
file		入力されたファイルを候補とする。

						*unite-source-file_mru*
file_mru	最近使用したファイルを候補とする。使用した順番に整列される。

						*unite-source-file_rec*
file_rec	入力された絞り込みテキストのディレクトリまたは、現在ディレクト
		リ直下のファイルすべてを候補とする。ディレクトリや隠しファイル
		は候補から除外される。候補が多すぎる場合はフリーズするかもしれ
		ない。
		sourceの引数として、絞り込み文字列を取る。

						*unite-source-buffer*
buffer		開いているバッファを候補とする。バッファは使用した順番に整列さ
		れる。

						*unite-source-buffer_tab*
buffer_tab	現在のタブで開いたバッファを候補とする。バッファは使用した順番
		に整列される。

						*unite-source-tab*
tab		開いているタブを候補とする。t:cwdをカレントディレクトリ、
		t:titleをタブのタイトルとして認識する。ただし、|gettabvar()|が
		使用可能である必要がある。

						*unite-source-register*
register	レジスタに保存されている文字列を候補とする。

						*unite-source-bookmark*
bookmark	ブックマークされたファイルやディレクトリを候補とする。

==============================================================================
kind						*unite-kind*

候補のkind

						*unite-kind-common*
common		共通アクション。ほとんどのkindはcommonを暗黙的に継承する。

						*unite-kind-openable*
openable	オープン可能インタフェース

						*unite-kind-cdable*
cdable		cd可能インタフェース

						*unite-kind-file*
file		ファイル

						*unite-kind-buffer*
buffer		バッファ

						*unite-kind-tab*
tab		タブ

						*unite-kind-directory*
directory	ディレクトリ

						*unite-kind-word*
word		文字列

						*unite-kind-jump_list*
jump_list	ジャンプリスト

==============================================================================
アクション					*unite-action*

|<Plug>(unite_choose_action)|で選択するときは、アクション名を補完したり、曖昧で
なければ先頭文字で省略することができる。

kind別アクション

common					*unite-action-common*
全てのkindに共通なインタフェースを定義している。
	nop		何もしない
	yank		ヤンクする
	ex		候補をコマンドラインに入力した状態にする

openable					*unite-action-openable*
オープン可能ファイルのインタフェースを定義している。
内部でopenアクションを呼び出すので、openアクションは継承したkind側が個別に定義
する必要がある。
	tabopen		ファイルをタブで開く
	split		ウィンドウを水平分割してファイルを開く
	vsplit		ウィンドウを垂直分割してファイルを開く
	left		ウィンドウを垂直分割して左側にファイルを開く
	right		ウィンドウを垂直分割して右側にファイルを開く
	above		ウィンドウを水平分割して上側にファイルを開く
	below		ウィンドウを水平分割して下側にファイルを開く

cdable					*unite-action-cdable*
cd可能ファイルのインタフェースを定義している。
内部では、candidate.action__directoryを使う。
	cd		カレントディレクトリを変更
	lcd		現在のウィンドウのカレントディレクトリを変更
	narrow		ディレクトリ名で候補を絞り込む
	vimshell	そのディレクトリで|vimshell|を起動する。これ
			は|vimshell|がインストールされている場合にのみ有効なア
			クションである。
	tabvimshell	そのディレクトリで|:VimShellTab|を実行する。これは
			|vimshell|がインストールされている場合にのみ有効な
			アクションである。
	rec		そのディレクトリで|unite-source-file_rec|を起動する。

file						*unite-action-file*
ファイルはすべて別のバッファに開かれる。
このkindは|unite-action-openable|と|unite-action-cdable|のアクションを継承している。
内部ではcandidate.action__pathとcandidate.action__directoryを使う。
	open		ファイルを開く
	fopen		現在のバッファの変更を破棄してファイルを開く。
			force openの略語。
	preview		プレビューウィンドウにファイルを開く
	bookmark	候補をブックマークに追加する

buffer						*unite-action-buffer*
このkindは|unite-action-file|のアクションを継承している。
	delete		バッファを削除
	fdelete		現在のバッファの変更を破棄して削除
	bookmark	候補をブックマークに追加する

tab						*unite-action-tab*
このkindは|gettabvar()|が存在するときのみ、|unite-action-cdable|のアクションを
継承する。
	open		タブを表示
	delete		タブを閉じる
	
	次のアクションは|gettabvar()|およびt:cwdが存在する必要がある。
	rename		タブのタイトルを変更

directory					*unite-action-directory*
このkindは|unite-action-file|のアクションを継承している。独自のアクションは存在
しない。対象がdirectoryのとき、default_actionを変更したい場合に使われる。

word						*unite-action-word*
	insert		現在のバッファに文字列を挿入する

jump_list					*unite-action-jump_list*
このkindは|unite-action-file|のアクションを継承している。ここではjump_list独自
のアクションについて解説する。
	open		その候補の場所にジャンプする
	preview		その候補の場所をプレビューする

source別アクション

file_mru					*unite-action-file_mru*
	delete		最近使用したファイルの候補から削除

bookmark					*unite-action-bookmark*
	delete		ブックマークファイルの候補から削除

						*unite-default-action*
デフォルトアクション

kind		アクション
{kind}		{action}
----------	----------
file		open
buffer		open
tab		open
directory	narrow
word		insert
jump_list	open

==============================================================================
sourceの作成					*unite-create-source*

autoload/unite/sources//に*.vimのファイルを置いておくと、自動的に読み込まれる。
その際、unite#sources#{source_name}#define()が呼ばれ、戻り値がsourceと解釈される。
戻り値はリストでもよく、その場合はsourceのリストと解釈される。
独自のsourceを動的に追加するためには、|unite#define_source()|を使う。

------------------------------------------------------------------------------
sourceの属性					*unite-source-attributes*

						*unite-source-attribute-name*
name			文字列		(必須)
			sourceの名前。以下の文字で構成しなければならない。
			文字:
			- a-z
			- 0-9
			- _
			- /

			例:
			- "buffer", "virw/git" と "file_mru" は正当。
			- "BadOne", "!@#$%^&*()_[]{}-|" と "" は
			  sourceの名前としては使えない。

						*unite-source-attribute-gather_candidates*
gather_candidates	関数		(必須)
			uniteが候補を収集する際に呼ばれる。
			この関数は{args}と{context}を引数に取り、{candidate}の
			リストを返す。
			{args}は|:Unite|コマンドを実行された際にsourceに渡され
			た引数リスト、{context}はsourceが呼ばれたときのコンテキ
			スト情報である。
			{context}については|unite-notation-{context}|、
			{candidate}については|unite-notation-{candidate}|を参照
			せよ。

						*unite-source-attribute-action_table*
action_table		辞書		(任意)
			source独自のアクションテーブルを追加するときに使用する。
			キーはアクションテーブルを追加するkindで、値は追加するアクションテーブルである。
			キーに"*"を設定すると、どんなkindにもマッチするようになる。
			アクションテーブルの詳細については、|unite-kind-attribute-action_table|
			を参照せよ。もしこれが与えられない場合、空となる。

						*unite-source-attribute-alias_table*
alias_table		辞書		(任意)
			source独自のエイリアステーブルを追加するときに使用す
			る。キーはエイリアステーブルを追加するkindで、値は追
			加するエイリアステーブルである。キーに"*"を設定する
			と、どんなkindにもマッチするようになる。
			エイリアステーブルの詳細については、
			|unite-kind-attribute-action_table|を参照せよ。もし
			これが与えられない場合、空となる。

						*unite-source-attribute-max_candidates*
max_candidates		数値		(任意)
			候補の最大数。
			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われる。この場合、最大数の制限はない。

						*unite-source-attribute-required_pattern_length*
required_pattern_length	数値		(任意)
			候補を収集するのに必要な絞り込み文字列の長さ。
			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われる。この場合、常に候補が収集され
			る。

						*unite-source-attribute-is_volatile*
is_volatile		数値		(任意)
			入力が変化するごとに、sourceが毎回候補を再計算するかど
			うか。
			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われる。この場合、候補はキャッシュさ
			れ、毎回|unite-source-attribute-gather_candidates|が呼
			ばれることはない。

NOTATION					*unite-notation*

{context}					*unite-notation-{context}*
			コンテキスト情報を与える辞書変数。主に、次の情報を持つ。

			input			(文字列)
				ユーザーの入力文字列。

			buffer_name		(文字列)
				uniteバッファの名前。

			prompt			(文字列)
				uniteバッファのプロンプト文字列。

			is_insert		(数値)
				uniteバッファが挿入モードから呼び出されたかどう
				か。

			source			(辞書)
				現在候補を収集しているsourceの情報。

{candidate}					*unite-notation-{candidate}*
			候補を表す辞書変数。次の情報を持つ。

			word			(文字列)
				画面に表示される候補を表す文字列。候補の絞り込
				みに使われる。

			abbr			(文字列)	(任意)
				画面に表示される候補を表す文字列。wordより優先
				されるが、候補の絞り込みには使われない。

			source			(文字列)
				候補が所属するsource名。

			kind			(文字列)
				候補が所属するkind名。

			source__{name}		(不定)		(任意)
				source独自の付加情報。source側で自由に使用でき
				る。

			action__{name}		(不定)		(任意)
				actionが使用する付加情報。例えば、
				"action__path"はそのファイルが存在するパスを指
				定する。実行するactionによって、その仕様は異な
				る。

==============================================================================
kindの作成					*unite-create-kind*

autoload/unite/kinds/に*.vimのファイルを置いておくと、自動的に読み込まれる。
その際、unite#kinds#{kind_name}#define()が呼ばれ、戻り値がkindと解釈される。
戻り値はリストでもよく、その場合はkindのリストと解釈される。
独自のkindを動的に追加するためには、|unite#define_kind()|を使う。

------------------------------------------------------------------------------
kindの属性					*unite-kind-attributes*

						*unite-kind-attribute-name*
name			文字列		(必須)
			kindの名前。以下の文字で構成しなければならない。
			ただし、"source"と"common"は予約されている。
			文字:
			- a-z
			- 0-9
			- _
			- /

			例:
			- "buffer", "virw/git" と "file_mru" は正当。
			- "BadOne", "!@#$%^&*()_[]{}-|" と "" は
			  kindの名前としては使えない。

						*unite-kind-attribute-default_action*
default_action		文字列		(必須)
			|<Plug>(unite_do_default_action)|を実行した際に呼ばれる
			標準的なアクションの名前を指定する。これを省略した場合
			は実行時にエラーになるが、それを逆手に取り、継承に使う
			だけのインタフェースアクションではこれを定義しないとい
			う手がある。

						*unite-kind-attribute-action_table*
action_table		辞書		(必須)
			アクションテーブルを指定する。
			アクションテーブルは辞書となっていて、キーとして、アク
			ションの名前を取る。値として、次の辞書情報を持つ。
			ただしアクションの名前として、"default"と"nop"は予約さ
			れている。ユーザーは使用できない。
			
			func			(関数)
				アクションの実行時に呼び出される関数。
				{candidate}を引数に取る。アクションの
				is_selectableが1の場合、{candidate}には候補のリ
				ストが渡される。{candidate}はキャッシュされてい
				るので、中身を変更してはならない。変更する場合
				は、|deepcopy()|を使うこと。

			description		(文字列)	(任意)
				アクションを説明する文字列。省略すると""になる。

			is_quit			(数値)		(任意)
				アクション実行後にuniteバッファを終了するかどう
				か。省略すると1になり、uniteバッファを終了する。

			is_selectable		(数値)		(任意)
				このアクションが候補を複数選択可能した際に実行
				可能かどうか。省略すると0になり、複数選択してい
				るとエラーとなる。

			is_invalidate_cache	(数値)		(任意)
				このアクションを実行した際にキャッシュを無効化
				するかどうか。省略すると0になり、キャッシュは無
				効化されない。

						*unite-kind-attribute-alias_table*
alias_table		辞書		(任意)
			エイリアステーブルを指定する。
			エイリアステーブルは辞書となっていて、キーとして、アク
			ションの名前を取る。値として、エイリアスとなるアクショ
			ン名を持つ。アクションに短縮名を付けたいときに便利で
			ある。値を"nop"とすると、そのアクションを無効化でき
			る。

						*unite-kind-attribute-parents*
parents			リスト		(任意)
			アクションを継承するkindの名前をリスト形式で指定する。
			省略すると、["common"]となる。アクションの検索について
			は、リストの順番で辿っていき、後から見つかったものによ
			って上書きされる。アクションは親のkindを辿って再帰的に
			検索されるので、無限ループに注意しなければならない。

------------------------------------------------------------------------------
sourceに特殊化されたkind			*unite-implicit-kind-for-a-source*

uniteはある特定のsourceによって生成されたkindを認識し、アクションを特殊化す
ることができる。特殊化されたkind名は、"source/{name}/{kind}"となる。{name}には
source名を指定する。{kind}を"*"とすると、どんなkindにもマッチする。

例えば、source "file"において"delete"アクションを追加するには以下のようにする。
>
	call unite#custom_action('source/file/*', 'delete', function('...'))
<
------------------------------------------------------------------------------
actionの解決順序				*neoui-action-resolution-order*

例えば、source "file"によって生成された、kind "file"(これは"openable",
"cdable"を継承している)の候補に対してアクションを実行した場合、アクションの
解決順序は次のようになる。

(1) Custom action table for kind "source/file/file".
(2) Default action table for kind "source/file/file".
(3) Custom action table for kind "source/file/*".
(4) Default action table for kind "source/file/*".
(5) Custom action table for kind "file".
(6) Default action table for kind "file".
(7) Custom action table for kind "openable".
(8) Default action table for kind "openable".
(9) Custom action table for kind "cdable".
(10) Default action table for kind "cdable".
(11) Custom action table for kind "common".
(12) Default action table for kind "common".

|unite-action-table|も参照せよ。

==============================================================================
設定例						*unite-examples*
>
	
	" The prefix key.
	nnoremap    [unite]   <Nop>
	nmap    f [unite]
	
	nnoremap [unite]u  :<C-u>Unite<Space>
	nnoremap <silent> [unite]f  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
	nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
	
	autocmd FileType unite call s:unite_my_settings()
	function! s:unite_my_settings()"{{{
	" Overwrite settings.
	
	imap <buffer> jj      <Plug>(unite_insert_leave)
	"imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
	
	" Start insert.
	"let g:unite_enable_start_insert = 1
	endfunction"}}}
	
	let g:unite_source_file_mru_limit = 200
	
>
==============================================================================
ユーザーのsource				*unite-user-sources*

ここでは、作者以外の手により作成されたsourceについて紹介を行う。

help						*unite-sources-help*
		http://github.com/tsukkee/unite-help
		ヘルプを検索するsourceである。
		作者はtsukkee氏。

tags						*unite-sources-tags*
		http://github.com/tsukkee/unite-tags
		タグファイルを検索するsourceである。
		作者はtsukkee氏。

outline						*unite-sources-outline*
		https://github.com/h1mesuke/unite-outline
		ソースファイルを検索し、アウトラインを表示するsourceである。
		作者はh1mesuke氏。

==============================================================================
TODO						*unite-todo*

==============================================================================
既知のバグ					*unite-bugs*

==============================================================================
更新履歴					*unite-changelog*

doc/unite.txtを参照せよ。

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
